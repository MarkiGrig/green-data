{"version":3,"sources":["components/Table/Table.js","components/CustomTableRow/CustomTableRow.js","actions/currentEmployeeActions.js","actions/errorMessageActions.js","components/CustomTableRow/CustomTableRowContainer.js","components/Table/EmployeeTableContainer.js","components/Controls/Controls.js","actions/employeeActions.js","components/Controls/ControlsContainer.js","components/EmployeeForm/EmployeeForm.js","components/EmployeeForm/EmployeeFormContainer.js","App.js","serviceWorker.js","reducers/employeeReducer.js","reducers/currentEmployeeReducer.js","reducers/positionsReducer.js","reducers/errorMessageReducer.js","index.js"],"names":["Table","data","columns","row","Paper","className","TableContainer","stickyHeader","TableHead","TableRow","map","column","TableCell","key","id","align","Typography","variant","label","TableBody","employee","chooseAlign","contentType","CustomTableRow","handleRowClick","isActive","onClick","event","Object","keys","filter","employeeProperty","index","content","required","rowCell","string","getDate","getMonth","getFullYear","str","split","slice","join","getCellString","renderItem","selectEmployeeAction","type","changeCurrentEmployeeAction","switchErrorMessage","newState","CustomTableRowContainer","dispatch","useDispatch","currentEmployee","useSelector","state","currentEmployeeState","shallowEqual","name","position","length","EmployeeTableContainer","employees","employeeState","rowData","Controls","addEmployee","removeEmployee","Button","size","color","disabled","changeEmployeeAction","ControlsContainer","newEmployee","nanoid","birthDay","sex","isDismissed","colleagues","EmployeeForm","positions","handleNameInput","handlePositionChange","handleDateChange","handleSexChange","handleStatusChange","handleColleagueChange","errorMessageState","getSecondaryInfo","resultString","day","month","year","FormControl","fullWidth","error","FormLabel","TextField","value","onChange","FormHelperText","hidden","select","option","MenuItem","DatePicker","clearable","minDate","Date","maxDate","format","date","RadioGroup","FormControlLabel","control","Radio","FormGroup","Checkbox","checked","Select","multiple","input","Input","renderValue","selected","indexOf","ListItemText","primary","secondary","EmployeeFormContainer","positionsState","e","target","App","utils","DateFnsUtils","Boolean","window","location","hostname","match","employeeReducer","action","item","ids","currentEmployeeReducer","positionsReducer","errorMessageReducer","reducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ad16964a.chunk.js","sourcesContent":["import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport TableTemplate from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport Typography from '@material-ui/core/Typography';\nimport TableRow from '@material-ui/core/TableRow';\nimport './Table.scss';\n\nconst Table = ({ data, columns, row }) => (\n    <Paper className='table'>\n        <TableContainer className={ 'table__container' }>\n            <TableTemplate stickyHeader>\n                <TableHead>\n                    <TableRow>\n                        {columns.map(column => (\n                            <TableCell\n                                key={ column.id }\n                                align='left'\n                                className={ 'table__header-cell-container ' +\n                                    `table__header-cell-container_${column.id}`\n                                }\n                            >\n                                <div className={ `table__header-cell table__header-cell_${column.id}` }>\n                                    <Typography\n                                        variant='h6'\n                                        className='table__header-cell-text'\n                                    >\n                                        {column.label}\n                                    </Typography>\n                                </div>\n                            </TableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {data.map((employee) => row(\n                        employee,\n                        employee.id + 'Container'\n                    ))}\n                </TableBody>\n            </TableTemplate>\n        </TableContainer>\n    </Paper>\n);\n\nexport default Table;","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst chooseAlign = (contentType) => {\n    switch (contentType) {\n    case 'string': {\n        return 'left';\n    }\n    case 'number': {\n        return 'right';\n    }\n    case 'list': {\n        return 'left';\n    }\n    default: {\n        return 'left';\n    }\n    }\n};\n\nconst getCellString = (key, rowCell) => {\n    if (rowCell !== null) {\n        if (key === 'birthDay') {\n            return `${rowCell.getDate()}.${rowCell.getMonth()+1}.${rowCell.getFullYear()}`;\n        } else if (key === 'isDismissed') {\n            return rowCell ? 'Да' : 'Нет';\n        } else if (key === 'colleagues') {\n            return rowCell.map(str => str.split(' ').slice(1).join(' ')).join('; ');\n        } else {\n            return rowCell;\n        }\n    }\n    return null;\n};\n\nconst renderItem = (required, key, rowCell) => {\n    const string = getCellString(key, rowCell);\n\n    if (required) {\n        if (string) {\n            return string;\n        } else {\n            return 'Обязательное поле';\n        }\n    }\n    return string;\n};\n\nconst CustomTableRow = ({ row, handleRowClick, isActive, columns }) => (\n    <TableRow\n        key={ row.id }\n        onClick={ event => handleRowClick(event, row.id) }\n        className={\n            'table__row ' +\n            (isActive() ?\n                'table__row_checked'\n                : '')\n        }\n    >\n        {Object.keys(row)\n            .filter(key => key !== 'id')\n            .map((employeeProperty, index) => (\n                <TableCell\n                    key={ `${row.id}_${index}` }\n                    align={ chooseAlign(columns[index].content) }\n                    className={ 'table__data-cell-container'\n                        + `table__header-cell-container_${columns[index].id}`\n                    }\n                >\n                    <div className={ `table__data-cell table__data-cell_${columns[index].id}` }>\n                        { renderItem(columns[index].required, employeeProperty, row[employeeProperty]) }\n                    </div>\n                </TableCell>\n            ))}\n    </TableRow>\n);\n\nexport default CustomTableRow;","export const selectEmployeeAction = (employee) => ({\n    type: 'SELECT_EMPLOYEE',\n    employee\n});\n\nexport const clearCurrentEmployeeAction = () => ({\n    type: 'CLEAR_CURRENT-EMPLOYEE'\n});\n\nexport const changeCurrentEmployeeAction = (employee) => ({\n    type: 'CHANGE_CURRENT-EMPLOYEE',\n    employee\n});","export const switchErrorMessage = (newState) => ({\n    type: 'SWITCH_ERROR_MESSAGE',\n    newState\n});","import React from 'react';\nimport CustomTableRow from './CustomTableRow';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { selectEmployeeAction } from '../../actions/currentEmployeeActions';\nimport { switchErrorMessage } from '../../actions/errorMessageActions';\n\nconst CustomTableRowContainer = ({ row, columns }) => {\n    const dispatch = useDispatch();\n\n    const currentEmployee = useSelector(state => state.currentEmployeeState, shallowEqual);\n\n    const handleRowClick = () => {\n        if (\n            (!!currentEmployee.name && !!currentEmployee.position) ||\n            currentEmployee.id.length === 0\n        ) {\n            dispatch(selectEmployeeAction(row));\n        } else {\n            dispatch(switchErrorMessage(true));\n        }\n    };\n\n    return (\n        <CustomTableRow\n            row={ row }\n            columns={ columns }\n            isActive={ () => row.id === currentEmployee.id }\n            handleRowClick={ handleRowClick }\n        />\n    );\n};\n\nexport default CustomTableRowContainer;","import React from 'react';\nimport Table from './Table';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport CustomTableRowContainer from '../CustomTableRow/CustomTableRowContainer';\n\nconst columns = [\n    { id: 'fullName',  label: 'ФИО', required: true, content: 'string' },\n    { id: 'position', label: 'Должность', required: true, content: 'string' },\n    { id: 'birthDate', label: 'Дата рождения', required: false, content: 'number' },\n    { id: 'sex', label: 'Пол', required: false, content: 'string' },\n    { id: 'isDismissed', label: 'Уволен', required: false, content: 'string' },\n    { id: 'colleagues', label: 'Коллеги', required: false, content: 'list-string' }\n];\n\nconst EmployeeTableContainer = () => {\n    const employees = useSelector(state => state.employeeState, shallowEqual);\n\n    return (\n        <Table\n            data={ employees }\n            columns={ columns }\n            row={ (rowData, key) => <CustomTableRowContainer\n                row={ rowData }\n                key={ key }\n                columns={ columns }\n            /> }\n        />\n    );\n};\n\nexport default EmployeeTableContainer;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport './Controls.scss';\n\nconst Controls = ({ addEmployee, removeEmployee, isActive }) => (\n    <div className={ 'controls' }>\n        <Button\n            variant=\"outlined\"\n            size='medium'\n            color='primary'\n            className='controls__item'\n            type='button'\n            onClick={ removeEmployee }\n            disabled={ !isActive }\n        >\n            Удалить\n        </Button>\n        <Button\n            variant=\"contained\"\n            size='medium'\n            color='primary'\n            className='controls__item'\n            type='button'\n            onClick={ addEmployee }\n        >\n            Добавить\n        </Button>\n    </div>\n);\n\nexport default Controls;","export const removeEmployeeAction = (id) => ({\n    type: 'REMOVE_EMPLOYEE',\n    id\n});\n\nexport const addEmployeeAction = (employee) => ({\n    type: 'ADD_EMPLOYEE',\n    employee\n});\n\nexport const changeEmployeeAction = (id, employee) => ({\n    type: 'CHANGE_EMPLOYEE',\n    id,\n    employee\n});","import React from 'react';\nimport Controls from './Controls';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeEmployeeAction, addEmployeeAction } from '../../actions/employeeActions';\nimport { clearCurrentEmployeeAction, selectEmployeeAction } from '../../actions/currentEmployeeActions';\nimport nanoid from 'nanoid';\nimport { switchErrorMessage } from '../../actions/errorMessageActions';\n\nconst ControlsContainer = () => {\n    const dispatch = useDispatch();\n\n    const currentEmployee = useSelector(state => state.currentEmployeeState, shallowEqual);\n\n    const addEmployee = () => {\n        if (\n            (!!currentEmployee.name && !!currentEmployee.position) ||\n            currentEmployee.id.length === 0\n        ) {\n            const id = nanoid();\n            const newEmployee = {\n                id: id,\n                name: '',\n                position: '',\n                birthDay: null,\n                sex: '',\n                isDismissed: false,\n                colleagues: []\n            };\n            dispatch(addEmployeeAction(newEmployee));\n            dispatch(selectEmployeeAction(newEmployee));\n        } else {\n            dispatch(switchErrorMessage(true));\n        }\n    };\n\n    const removeEmployee = () => {\n        if (currentEmployee.id !== null) {\n            dispatch(removeEmployeeAction(currentEmployee.id));\n            dispatch(clearCurrentEmployeeAction());\n            dispatch(switchErrorMessage(false));\n        }\n    };\n\n    return (\n        <Controls\n            addEmployee={ addEmployee }\n            removeEmployee={ removeEmployee }\n            isActive={ !!currentEmployee.id }\n        />\n    );\n};\n\nexport default ControlsContainer;","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { DatePicker } from '@material-ui/pickers';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Input from '@material-ui/core/Input';\nimport './EmployeeForm.scss';\n\nconst EmployeeForm = (\n    {\n        positions,\n        employees,\n        currentEmployee,\n        handleNameInput,\n        handlePositionChange,\n        handleDateChange,\n        handleSexChange,\n        handleStatusChange,\n        handleColleagueChange,\n        isActive,\n        errorMessageState\n    }) => {\n\n    const getSecondaryInfo = (employee) => {\n        let resultString = employee.position;\n\n        if (employee.birthDay) {\n            const day = employee.birthDay.getDate();\n            const month = employee.birthDay.getMonth()+1;\n            const year = employee.birthDay.getFullYear();\n            const date = `${day}.${month}.${year}`;\n            resultString += ', Родился: ' + date;\n        }\n        return resultString;\n    };\n\n    return (\n        <Paper className='employee-form'>\n            <FormControl\n                fullWidth required className='employee-form__control'\n                error={ errorMessageState && !currentEmployee.name.length }\n            >\n                <FormLabel className='employee-form__label'>ФИО</FormLabel>\n                <TextField\n                    required\n                    fullWidth\n                    value={ currentEmployee.name }\n                    onChange={ handleNameInput }\n                    disabled={ !isActive }\n                />\n                <FormHelperText hidden={ !errorMessageState || currentEmployee.name.length !== 0 }>\n                    Заполните поле\n                </FormHelperText>\n            </FormControl>\n\n            <FormControl\n                fullWidth required className='employee-form__control'\n                error={ errorMessageState && !currentEmployee.position.length }\n            >\n                <FormLabel className='employee-form__label'>Должность</FormLabel>\n                <TextField\n                    select\n                    onChange={ handlePositionChange }\n                    fullWidth\n                    required\n                    value={ currentEmployee.position }\n                    disabled={ !isActive }\n                >\n                    {positions.map(option => (\n                        <MenuItem key={ option + 'selectPosition' } value={ option }>\n                            {option}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <FormHelperText hidden={ !errorMessageState || currentEmployee.position.length !== 0 }>\n                    Заполните поле\n                </FormHelperText>\n            </FormControl>\n\n            <FormControl fullWidth className='employee-form__control'>\n                <FormLabel className='employee-form__label'>Дата рождения</FormLabel>\n                <DatePicker\n                    clearable\n                    value={ currentEmployee.birthDay }\n                    minDate={ new Date(1900, 0) }\n                    maxDate={ new Date() }\n                    format=\"dd.MM.yyyy\"\n                    onChange={ date => handleDateChange(date) }\n                    fullWidth\n                    disabled={ !isActive }\n                />\n            </FormControl>\n\n            <FormControl fullWidth disabled={ !isActive } className='employee-form__control'>\n                <FormLabel className='employee-form__label'>Пол</FormLabel>\n                <RadioGroup row name=\"sex\" value={ currentEmployee.sex } onChange={ handleSexChange }>\n                    <FormControlLabel value=\"Мужской\" control={ <Radio color=\"primary\"/> } label=\"Мужской\" />\n                    <FormControlLabel value=\"Женский\" control={ <Radio color=\"primary\"/> } label=\"Женский\" />\n                </RadioGroup>\n            </FormControl>\n\n            <FormControl fullWidth disabled={ !isActive } className='employee-form__control'>\n                <FormLabel className='employee-form__label'>Статус</FormLabel>\n                <FormGroup row>\n                    <FormControlLabel\n                        control={ <Checkbox\n                            checked={ currentEmployee.isDismissed }\n                            onChange={ handleStatusChange }\n                            name=\"isDismissed\"\n                            color=\"primary\"\n                        /> }\n                        label=\"Уволен\"\n                    />\n                </FormGroup>\n            </FormControl>\n\n            <FormControl fullWidth disabled={ !isActive } className='employee-form__control'>\n                <FormLabel className='employee-form__label'>Коллеги</FormLabel>\n                <Select\n                    multiple\n                    value={ currentEmployee.colleagues }\n                    onChange={ handleColleagueChange }\n                    input={ <Input /> }\n                    renderValue={ selected => selected\n                        .map(str => str.split(' ').slice(1).join(' ')).join('; ')\n                    }\n                >\n                    {employees\n                        .filter(employee => employee.id !== currentEmployee.id)\n                        .map(employee => (\n                            <MenuItem\n                                key={ employee.id+'select' }\n                                value={ employee.id + ' ' + employee.name + ', ' + getSecondaryInfo(employee) }\n                            >\n                                <Checkbox\n                                    checked={\n                                        currentEmployee.colleagues.indexOf(\n                                            employee.id + ' ' + employee.name + ', ' + getSecondaryInfo(employee)\n                                        ) > -1\n                                    }\n                                    color=\"primary\"\n                                />\n                                <ListItemText\n                                    primary={ employee.name }\n                                    secondary={ getSecondaryInfo(employee) } />\n                            </MenuItem>\n                        ))}\n                </Select>\n            </FormControl>\n        </Paper>\n    );\n};\n\nexport default EmployeeForm;","import React from 'react';\nimport EmployeeForm from './EmployeeForm';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { changeCurrentEmployeeAction } from '../../actions/currentEmployeeActions';\nimport { changeEmployeeAction } from '../../actions/employeeActions';\nimport { switchErrorMessage } from '../../actions/errorMessageActions';\n\nconst EmployeeFormContainer = () => {\n    const dispatch = useDispatch();\n\n    const {positions, employees, currentEmployee, errorMessageState} = useSelector(state => ({\n        positions: state.positionsState,\n        employees: state.employeeState,\n        currentEmployee: state.currentEmployeeState,\n        errorMessageState: state.errorMessageState\n    }), shallowEqual);\n\n    const handleNameInput = (e) => {\n        const employee = {\n            id: currentEmployee.id,\n            name: e.target.value,\n            position: currentEmployee.position,\n            birthDay: currentEmployee.birthDay,\n            sex: currentEmployee.sex,\n            isDismissed: currentEmployee.isDismissed,\n            colleagues: currentEmployee.colleagues\n        };\n        dispatch(changeCurrentEmployeeAction(employee));\n        dispatch(changeEmployeeAction(currentEmployee.id, employee));\n        dispatch(switchErrorMessage(false));\n    };\n\n    const handleDateChange = (date) => {\n        const employee = {\n            id: currentEmployee.id,\n            name: currentEmployee.name,\n            position: currentEmployee.position,\n            birthDay: date,\n            sex: currentEmployee.sex,\n            isDismissed: currentEmployee.isDismissed,\n            colleagues: currentEmployee.colleagues\n        };\n        dispatch(changeCurrentEmployeeAction(employee));\n        dispatch(changeEmployeeAction(currentEmployee.id, employee));\n    };\n\n    const handlePositionChange = (e) => {\n        const employee = {\n            id: currentEmployee.id,\n            name: currentEmployee.name,\n            position: e.target.value,\n            birthDay: currentEmployee.birthDay,\n            sex: currentEmployee.sex,\n            isDismissed: currentEmployee.isDismissed,\n            colleagues: currentEmployee.colleagues\n        };\n        dispatch(changeCurrentEmployeeAction(employee));\n        dispatch(changeEmployeeAction(currentEmployee.id, employee));\n        dispatch(switchErrorMessage(false));\n    };\n\n    const handleSexChange = (e) => {\n        const employee ={\n            id: currentEmployee.id,\n            name: currentEmployee.name,\n            position: currentEmployee.position,\n            birthDay: currentEmployee.birthDay,\n            sex: e.target.value,\n            isDismissed: currentEmployee.isDismissed,\n            colleagues: currentEmployee.colleagues\n        };\n        dispatch(changeCurrentEmployeeAction(employee));\n        dispatch(changeEmployeeAction(currentEmployee.id, employee));\n    };\n\n    const handleColleagueChange = (e) => {\n        const employee = {\n            id: currentEmployee.id,\n            name: currentEmployee.name,\n            position: currentEmployee.position,\n            birthDay: currentEmployee.birthDay,\n            sex: currentEmployee.sex,\n            isDismissed: currentEmployee.isDismissed,\n            colleagues: e.target.value\n        };\n        dispatch(changeCurrentEmployeeAction(employee));\n        dispatch(changeEmployeeAction(currentEmployee.id, employee));\n    };\n\n    const handleStatusChange = (e) => {\n        const employee = {\n            id: currentEmployee.id,\n            name: currentEmployee.name,\n            position: currentEmployee.position,\n            birthDay: currentEmployee.birthDay,\n            sex: currentEmployee.sex,\n            isDismissed: e.target.checked,\n            colleagues: currentEmployee.colleagues\n        };\n        dispatch(changeCurrentEmployeeAction(employee));\n        dispatch(changeEmployeeAction(currentEmployee.id, employee));\n    };\n\n    return (\n        <EmployeeForm\n            positions={ positions }\n            employees={ employees }\n            currentEmployee={ currentEmployee }\n            handleNameInput={ handleNameInput }\n            handlePositionChange={ handlePositionChange }\n            handleDateChange={ handleDateChange }\n            handleSexChange={ handleSexChange }\n            handleStatusChange={ handleStatusChange }\n            handleColleagueChange={ handleColleagueChange }\n            isActive={ !!currentEmployee.id }\n            errorMessageState={ errorMessageState }\n        />\n    );\n};\n\nexport default EmployeeFormContainer;","import React from 'react';\nimport './App.scss';\nimport EmployeeTableContainer from './components/Table/EmployeeTableContainer';\nimport ControlsContainer from './components/Controls/ControlsContainer';\nimport EmployeeFormContainer from './components/EmployeeForm/EmployeeFormContainer';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\n\nfunction App() {\n    return (\n        <MuiPickersUtilsProvider utils={ DateFnsUtils }>\n            <div className=\"App\">\n                <div className=\"App__group App__group_left\">\n                    <EmployeeTableContainer />\n                    <div className='App__controls'>\n                        <ControlsContainer />\n                    </div>\n                </div>\n                <div className='App__form'>\n                    <EmployeeFormContainer />\n                </div>\n            </div>\n        </MuiPickersUtilsProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","const employeeReducer = (state = [], action) => {\n    switch (action.type) {\n    case 'REMOVE_EMPLOYEE': {\n        return state.filter((item) => item.id !== action.id);\n    }\n    case 'ADD_EMPLOYEE': {\n        return [action.employee, ...state];\n    }\n    case 'CHANGE_EMPLOYEE': {\n        const newState = [...state];\n        const ids = newState.map((item) => item.id);\n        const index = ids.indexOf(action.id);\n        if (index !== -1) {\n            newState[index] = action.employee;\n            return newState;\n        }\n        return state;\n    }\n    default:\n        return state;\n    }\n};\n\nexport default employeeReducer;","const currentEmployeeReducer = (state = {\n    id: '',\n    name: '',\n    position: '',\n    birthDay: null,\n    sex: '',\n    isDismissed: '',\n    colleagues: []\n}, action) => {\n    switch (action.type) {\n    case 'SELECT_EMPLOYEE': {\n        return state.id !== action.employee.id ? action.employee : state;\n    }\n    case 'CHANGE_CURRENT-EMPLOYEE': {\n        return action.employee;\n    }\n    case 'CLEAR_CURRENT-EMPLOYEE': {\n        return {\n            id: '',\n            name: '',\n            position: '',\n            birthDay: null,\n            sex: '',\n            isDismissed: false,\n            colleagues: []\n        };\n    }\n    default:\n        return state;\n    }\n};\n\nexport default currentEmployeeReducer;","const positionsReducer = (state = [], action) => {\n    switch (action.type) {\n    default: {\n        return state;\n    }\n    }\n};\n\nexport default positionsReducer;","const errorMessageReducer = (state = false, action) => {\n    switch (action.type) {\n    case 'SWITCH_ERROR_MESSAGE': {\n        return action.newState;\n    }\n    default: {\n        return state;\n    }\n    }\n};\n\nexport default errorMessageReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { combineReducers, createStore } from 'redux';\nimport employeeReducer from './reducers/employeeReducer';\nimport currentEmployeeReducer from './reducers/currentEmployeeReducer';\nimport positionsReducer from './reducers/positionsReducer';\nimport errorMessageReducer from './reducers/errorMessageReducer';\n\nconst reducers = combineReducers({\n    employeeState: employeeReducer,\n    currentEmployeeState: currentEmployeeReducer,\n    positionsState: positionsReducer,\n    errorMessageState: errorMessageReducer\n});\n\nconst initialState = {\n    errorMessageState: false,\n    currentEmployeeState: {\n        id: '',\n        name: '',\n        position: '',\n        birthDay: null,\n        sex: '',\n        isDismissed: false,\n        colleagues: []\n    },\n    positionsState: [\n        'Генеральный директор',\n        'Заместитель генерального директора',\n        'Глава экономического отдела',\n        'HR специалист',\n        'Senior Frontend разработчик',\n        'Middle Frontend разработчик',\n        'Junior Frontend разработчик',\n        'Senior Backend разработчик',\n        'Middle Backend разработчик',\n        'Junior Backend разработчик',\n        'Уборщик'\n    ],\n    employeeState: []\n};\n\nconst store = createStore(\n    reducers,\n    initialState,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={ store }>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}